---
alwaysApply: false
---
# 🧑‍💻 LogSage AI – Code Guidelines

These guidelines ensure the codebase for LogSage AI remains clean, secure, modular, and aligned with the PRD goals.

---

## 1. 🧱 Project Structure & Modularity

- Organize code into clear domains:
  ```
  /frontend/     → Flask UI components
  /api/          → FastAPI endpoints
  /parser/       → Log parsing (regex, JSON, CSV)
  /rag/          → Retrieval-Augmented Generation (LangChain, embeddings)
  /models/       → LLM wrappers (GPT, LLaMA, etc.)
  /storage/      → File handling, vector DB
  /config/       → User config and environment handling
  ```
- Follow single-responsibility principle (SRP)
- Keep modules independently testable

---

## 2. 🔒 Privacy & Security

- Never log user content, embeddings, or queries
- Store all data locally (no cloud storage dependencies)
- Use JWT/Basic Auth for API endpoints
- Sanitize user input paths and files

---

## 3. ⚡ Performance

- Stream large logs (up to 100 MB) — avoid full memory loads
- Cap AI response time under 15s
- Use caching for repeated queries/embeddings
- Optimize chunk size and retrieval strategy

---

## 4. 🤖 AI Model Usage

- Toggle models via config:
  - `OpenAI GPT-4/4o` (online)
  - `LLaMA/Mistral/MiniLM` (offline)
- Editable `prompts.yaml` or `.json` for query templates
- Expose chunk size, vector backend, and embedding model in settings

---

## 5. 🧪 Testing

- Write unit tests for:
  - Parsers (regex, JSON, time filters)
  - AI response generation
  - Vector search logic
- Use sample logs for test coverage (error logs, mixed formats)

---

## 6. 🧠 Explainability

- Show retrieved log chunks alongside AI responses
- Allow "click to view source" from insights panel
- Store intermediate AI reasoning steps locally for user audit

---

## 7. 🧹 Clean Code Practices

- Python 3.11+
- Auto-format using `black`, follow `PEP8`
- Use docstrings and type hints
- Prefer `logging` over `print` (store logs locally only)

---

## 8. 📁 Config & Environment

- Store settings in `config.yaml` or `.env.local`
- Use relative/local paths only
- Example config:
  ```yaml
  use_openai: false
  embedding_model: all-MiniLM-L6-v2
  vector_db: faiss
  max_log_file_mb: 100
  ```

---

## 9. 🔁 Git & Versioning

- Use descriptive branches: `feature/ai-query-panel`, `bugfix/parser-crash`
- Follow semantic versioning: `v1.0.0-mvp`, `v1.1.0-beta`
- Document releases in `CHANGELOG.md`
- Keep commits atomic and readable

---

## 10. 🤖 Cursor & Agent Rules

- Tag generated code as `# generated by Cursor`
- Summarize generation intent in commit messages
- Follow `cursor-rules.md` for scope and task guidance

---